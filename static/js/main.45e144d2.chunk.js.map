{"version":3,"sources":["Card.js","CardList.js","robots.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","username","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.45e144d2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, username, email, id}) => {\r\n  return (\r\n    <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{username}</p>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n  const cardArray = robots.map((user,i) =>{\r\n    return <Card key={i}\r\n     id={robots[i].id}\r\n     name={robots[i].name}\r\n     username={robots[i].username}\r\n     email={robots[i].email}/>\r\n  })\r\n  return (\r\n    <div>\r\n       {cardArray}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","export const robots = [{\r\n        id: 1,\r\n        name: 'Rajdeep Riar',\r\n        username: 'Raj_DGAF',\r\n        email: 'Raj@gmail.com'\r\n    },\r\n    {\r\n        id: 2,\r\n        name: 'Ariana Ochoa',\r\n        username: 'Nanauhhh',\r\n        email: 'girl@gmail.com'\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Together Forever',\r\n        username: '<3',\r\n        email: 'hiiiiiii babes :)'\r\n    },\r\n    {\r\n        id: 4,\r\n        name: 'Patricia Lebsack',\r\n        username: 'Karianne',\r\n        email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Chelsey Dietrich',\r\n        username: 'Kamren',\r\n        email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n        id: 6,\r\n        name: 'Mrs. Dennis Schulist',\r\n        username: 'Leopoldo_Corkery',\r\n        email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Kurtis Weissnat',\r\n        username: 'Elwyn.Skiles',\r\n        email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n        id: 8,\r\n        name: 'Nicholas Runolfsdottir V',\r\n        username: 'Maxime_Nienow',\r\n        email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Glenna Reichert',\r\n        username: 'Delphine',\r\n        email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n        id: 10,\r\n        name: 'Clementina DuBuque',\r\n        username: 'Moriah.Stanton',\r\n        email: 'Rey.Padberg@karina.biz'\r\n    }\r\n];","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return (\r\n    <div className= 'pa2'>\r\n      <input className='pa3 ba b--green bg-lightest-blue' type=\"search\" placeholder ='search robots'\r\n      onChange={searchChange}/>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport {robots} from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      robots: robots,\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({searchfield : event.target.value})\r\n  }\r\n\r\n  render(){\r\n    const filteredRobots = this.state.robots.filter(robots =>{\r\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    })\r\n    return (\r\n      <div className= 'tc'>\r\n        <h1>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <CardList robots = { filteredRobots}/>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { robots } from './robots';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}